
/*! zoom_marker - v0.1.5 - */

!function (a) { const b = []; var c = 0; a.fn.extend({ zoomMarker: function (b) { const c = a(this).attr("id"); d(c); const f = e(c); var g = f.options, i = f.that, j = f.dialog, k = f.isInit; if (!k) { k = !0, f.isInit = k, document.ondragstart = function () { return !1 }, i = a(this), f.that = i; var l; if (g = void 0 === b ? u : a.extend({}, u, b), f.options = g, null === g.src) return void console.error("Image resources is not defined."); h(c, g.src), i.bind("mousewheel", function (a, b) { return i.zoomMarker_Zoom(g.zoom_lock ? null : { x: a.pageX, y: a.pageY }, b > 0 ? 1 + g.rate : 1 - g.rate), !1 }); const m = new Hammer(document.getElementById(a(this).attr("id"))); m.get("pan").set({ direction: Hammer.DIRECTION_ALL }), m.on("panleft panright panup pandown", function (a) { g.pinchlock || (j.hide(), i.zoomMarker_Move(a.deltaX + l.left, a.deltaY + l.top), g.auto_index_z && q(c)) }), m.on("panstart", function () { l = i.offset() }), m.on("panend", function () { g.pinchlock = !1 }), m.get("pinch").set({ enable: !0 }), m.on("pinchmove", function (a) { j.hide(), i.zoomMarker_Zoom({ x: a.center.x, y: a.center.y }, a.scale / g.pinchscale), g.pinchscale = a.scale }), m.on("pinchstart", function () { g.pinchlock = !0, g.pinchscale = 1 }), j = a("<div id='zoom-marker-hover-dialog' class='zoom-marker-hover-dialog'></div>"), f.dialog = j, i.parent().append(j), m.on("tap", function (a) { const b = e(c), d = b.options, f = b.that; if (!r(c)) return void q(c); if (void 0 === a.pointers[0].x) { const g = f.offset(); f.trigger("zoom_marker_mouse_click", { x: (a.center.x - g.left) / f.width() * d.imgNaturalSize.width, y: (a.center.y - g.top) / f.height() * d.imgNaturalSize.height }) } else f.trigger("zoom_marker_mouse_click", { pageX: a.pointers[0].offsetX, pageY: a.pointers[0].offsetY, x: a.pointers[0].offsetX / f.width() * d.imgNaturalSize.width, y: a.pointers[0].offsetY / f.height() * d.imgNaturalSize.height }); d.auto_index_z && q(c) }) } }, zoomMarker_LoadImage: function (b) { const c = a(this).attr("id"); h(c, b, !0) }, zoomMarker_Zoom: function (b, c) { const d = a(this).attr("id"), f = e(d), g = f.options, h = f.that, i = h.offset(), j = g.imgNaturalSize.height / g.imgNaturalSize.width, k = h.height(), m = h.width(); var n = m * c, o = n * j; null != g.max && n > g.max ? (n = g.max, o = n * j) : null != g.min && n < g.min && (n = g.min, o = n * j), h.height(parseInt(o)), h.width(parseInt(n)), void 0 !== b && null !== b || (b = {}, b.x = i.left + m / 2, b.y = i.top + k / 2), h.offset({ top: b.y - h.height() * (b.y - i.top) / k, left: b.x - h.width() * (b.x - i.left) / m }), l(d), t(d) }, zoomMarker_Move: function (b, c) { const d = a(this).attr("id"), f = e(d), g = f.options; if (g.enable_drag) { if (g.move_limit) { const h = a(this), i = h.parent().offset(), j = h.parent().width() + i.left, k = h.parent().height() + i.top, m = h.width(), n = h.height(); var o = b, p = c; o + m > j ? o = j - m : o < i.left && (o = i.left), p + n > k ? p = k - n : p < i.top && (p = i.top), a(this).offset({ top: p, left: o }) } else a(this).offset({ top: c, left: b }); l(d), t(d) } }, zoomMarker_AddMarker: function (b) { return k(a(this).attr("id"), b) }, zoomMarker_RemoveMarker: function (b) { n(a(this).attr("id"), b) }, zoomMarker_CleanMarker: function () { m(a(this).attr("id")) }, zoomMarker_GetPicSize: function () { const b = a(this).attr("id"); return e(b).options.imgNaturalSize }, zoomMarker_EnableDrag: function (b) { p(a(this).attr("id"), b) }, zoomMarker_TopIndexZ: function () { q(a(this).attr("id")) }, zoomMarker_Canvas: function () { const b = a(this).attr("id"); return e(b).canvas.context }, zoomMarker_CanvasClean: function () { const b = a(this).attr("id"); s(b) }, zoomMarker_MoveMarker: function (b, c, d) { const f = a(this).attr("id"), g = e(f); a(g.markerList).each(function (a, e) { if (e.id === b) return o(f, e.marker, { x: c, y: d, size: e.param.size }, g.that.offset()), !1 }) }, zoomMarker_ResetImage: function () { const b = a(this).attr("id"), c = e(b), d = c.initSize; console.log(c.options.markers), c.that.width(d.width).height(d.height).offset({ top: d.top, left: d.left }), l(b), t(b) } }); const d = function (a) { if (void 0 === b[a]) { const d = { index: c += 2, id: a, options: { imgNaturalSize: { width: 0, height: 0 } }, initSize: { width: 0, height: 0, top: 0, left: 0 }, that: null, dialog: null, isInit: !1, markerList: [], markerId: 0, canvas: { item: null, context: null } }; return b.push(d), d } return b[a] }, e = function (a) { for (var c = 0; c < b.length; ++c) if (b[c].id === a) return b[c]; return null }, f = function (a, b) { a.onload = null, a.onload = function () { b(g(a)) } }, g = function (a) { var b, c; if (void 0 === a.naturalWidth) { const d = new Image; d.src = a.src, b = d.width, c = d.height } else b = a.naturalWidth, c = a.naturalHeight; return { width: b, height: c } }, h = function (a, b, c) { const d = e(a), g = d.options, h = d.that; h.trigger("zoom_marker_img_load", b), h.attr("src", b), h.css("z-index", d.index), f(document.getElementsByName(h.attr("name"))[0], function (b) { if (void 0 === c || !c) { const e = h.width(), f = h.height(); null != g.width && (h.width(g.width), h.height(h.width() / e * f)) } h.trigger("zoom_marker_img_loaded", b), void 0 !== c && c || i(a), g.imgNaturalSize = b, d.options.imgNaturalSize = b, d.initSize.width = h.width(), d.initSize.height = h.height(), d.initSize.left = h.offset().left, d.initSize.top = h.offset().top, j(a, g.markers), q(a), g.enable_canvas && s(a) }) }, i = function (a) { const b = e(a), c = b.that, d = c.offset(), f = c.parent(), g = d.top + (f.height() - c.height()) / 2, h = d.left + (f.width() - c.width()) / 2; c.offset({ top: g > 0 ? g : 0, left: h > 0 ? h : 0 }) }, j = function (b, c) { a(c).each(function (a, c) { k(b, c) }) }, k = function (b, c) { const d = e(b), f = d.options, g = d.dialog, h = d.that, i = d.markerId, j = d.markerList, k = a("<div id='" + b + i + "' class='zoom-marker'><img draggable='false'><span></span></div>"); k.css("z-index", d.index + 1); const l = k.find("img"), m = c.size || f.marker_size, n = void 0 === c.draggable || c.draggable; var p = null; if (c.size = m, l.attr("src", c.src), void 0 !== c.hint) { const q = k.find("span"); q.empty().append(c.hint.value || ""), q.css(c.hint.style || {}) } l.height(m), l.width(m); const r = { id: i, marker: k, param: c }; if (d.markerId++, setTimeout(function () { k.click(function () { null === p && (void 0 !== c.click && c.click(r), h.trigger("zoom_marker_click", r)), p = null }) }, 100), void 0 !== c.dialog && (k.mousemove(function (a) { null === p && (f.hover_marker_id = r.id, g.empty().append(c.dialog.value || "").css(c.dialog.style || {}).show().offset({ left: (c.dialog.offsetX || 0) + a.pageX, top: (c.dialog.offsetY || 0) + a.pageY })) }), k.mouseout(function () { f.hover_marker_id = null, g.hide() })), h.parent().append(k), j.push(r), d.markerList = j, o(b, k, c, h.offset()), n) { const s = new Hammer(document.getElementById(k.attr("id"))); s.on("pan", function (a) { const b = h.offset().left - c.size / 2, d = b + h.width(), e = h.offset().top - c.size, f = e + h.height(); var g = a.deltaX + p.left, i = a.deltaY + p.top; g < b ? g = b : g > d && (g = d), i < e ? i = e : i > f && (i = f), k.offset({ left: g, top: i }) }), s.on("panstart", function () { p = k.offset() }), s.on("panend", function () { const a = h.offset().left - c.size / 2, b = h.offset().top - c.size; r.param.x = (k.offset().left - a) * f.imgNaturalSize.width / h.width(), r.param.y = (k.offset().top - b) * f.imgNaturalSize.height / h.height() }) } return r }, l = function (b) { const c = e(b), d = c.that, f = d.offset(); a(c.markerList).each(function (a, c) { o(b, c.marker, c.param, f) }) }, m = function (b) { const c = e(b), d = c.markerList; a(d).each(function (a, b) { b.marker.unbind(), b.marker.remove() }), c.markerList = [], c.options.markers = [], c.dialog.hide() }, n = function (b, c) { const d = e(b), f = d.options, g = d.dialog; a(d.markerList).each(function (a, b) { if (b.id === c) return b.marker.unbind(), b.marker.remove(), null !== (f.hover_marker_id || null) && f.hover_marker_id === c && g.hide(), !1 }) }, o = function (a, b, c, d) { const f = e(a), g = f.that, h = f.options; b.offset({ left: g.width() * c.x / h.imgNaturalSize.width + d.left - c.size / 2, top: g.height() * c.y / h.imgNaturalSize.height + d.top - c.size }) }, p = function (a, b) { e(a).options.enable_drag = b }, q = function (a) { const c = e(a); if (b.forEach(function (b, c) { b.id !== a && (b.that.css("z-index", b.index), b.that.addClass("zoom-marker-opacity"), b.markerList.forEach(function (a, c) { a.marker.css("z-index", b.index + 1), a.marker.addClass("zoom-marker-opacity") }), null !== b.canvas.item && (b.canvas.item.css("z-index", b.index + 1), b.canvas.item.addClass("zoom-marker-opacity"))) }), void 0 !== c) { const d = c.markerList, f = c.that; f.removeClass("zoom-marker-opacity"), f.css("z-index", 980), d.forEach(function (a, b) { a.marker.css("z-index", 981), a.marker.removeClass("zoom-marker-opacity") }), null !== c.canvas.item && (c.canvas.item.css("z-index", 981), c.canvas.item.removeClass("zoom-marker-opacity")) } }, r = function (a) { const c = e(a); var d = -1; return b.forEach(function (a, b) { a.that.css("z-index") > d && (d = a.that.css("z-index")) }), c.that.css("z-index") === d }, s = function (b) { const c = a("#" + b + "_canvas"); null !== c && c.remove(); const d = e(b), f = d.options, g = f.imgNaturalSize, h = d.that, i = a("<canvas id='" + b + "_canvas' width='" + g.width + "' height='" + g.height + "'  style='z-index: " + (d.index + 1) + "; position: absolute; left: 100px; top: 0px; pointer-events:none'>Current browser is not support canvas tag</canvas>"); h.parent().append(i); const j = document.getElementById(b + "_canvas").getContext("2d"); d.canvas.item = i, d.canvas.context = j, t(b) }, t = function (a) { const b = e(a), c = b.canvas.item; if (null !== c) { const d = b.that; d.offset(); c.offset({ top: d.offset().top, left: d.offset().left }), c.height(d.height()), c.width(d.width()) } }; var u = { rate: .2, src: null, width: 500, min: 300, max: null, markers: [], marker_size: 20, enable_drag: !0, auto_index_z: !0, enable_canvas: !1, zoom_lock: !1, move_limit: !1 } }(window.jQuery);